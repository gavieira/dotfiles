#!/bin/bash

# Save current IFS
SAVEIFS=$IFS
# Change IFS to newline
IFS=$(echo -en "\n\b")

# Set the source language and target language
source_lang="en"
target_lang="pt-BR"  # Change this to your target language

# Naming pattern for translated files
translated_file_suffix=".pt-BR.srt"

# Maximum number of concurrent processes
max_processes=12  # Adjust this value as needed

# Find all SRT files in current directory and subdirectories
srt_files=$(find . -type f -name "*.srt" -not -name "*$translated_file_suffix")


translate_srt() {
    srt_file="$1"
    subdirectory=$(dirname "$srt_file")
    translated_file="${subdirectory}/$(basename "${srt_file%.*}")$translated_file_suffix"

    if [ -e "$translated_file" ]; then
        echo "Translated SRT file $translated_file already exists. Skipping."
    else
        echo "Translating ${srt_file}"
        trans -b "$source_lang:$target_lang" -i "$srt_file" -o "$translated_file" > /dev/null
        
	# Fix timestamp formatting in the translated file (',' as decimal separator in EN, '.' as pt-BR)
        fix_srt_format "$translated_file"
        
        echo "Translated and fixed ${srt_file}"
    fi
}

fix_srt_format() {
    local file="$1"
    sed -E -i 's/([0-9]{2}): ([0-9]{2}): ([0-9]{2})[.,]([0-9]{3}) -> ([0-9]{2}): ([0-9]{2}): ([0-9]{2})[.,]([0-9]{3})/\1:\2:\3,\4 --> \5:\6:\7,\8/g' "$file"
}

# Export the function to make it accessible by subshells
export -f translate_srt
export -f fix_srt_format

# Counter for concurrent processes
process_count=4

# Iterate through each SRT file
for srt_file in $srt_files; do
    # Check if the maximum number of processes is reached
    if [ "$process_count" -ge "$max_processes" ]; then
        # Wait for any background process to finish
        wait -n
        ((process_count--))
    fi
    
    # Execute the translation function in background
    translate_srt "$srt_file" &
    ((process_count++))
done

# Wait for remaining background processes to finish
wait 

# Restore IFS
IFS=$SAVEIFS

